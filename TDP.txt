
import requests
import json

# === 1Ô∏è‚É£ Replace these with your Xray credentials ===
CLIENT_ID = "YOUR_CLIENT_ID"
CLIENT_SECRET = "YOUR_CLIENT_SECRET"

# === 2Ô∏è‚É£ Your Jira project key ===
PROJECT_KEY = "YOUR_PROJECT_KEY"

# === 3Ô∏è‚É£ Authenticate to Xray Cloud ===
auth_url = "https://xray.cloud.getxray.app/api/v2/authenticate"
auth_payload = {
    "client_id": CLIENT_ID,
    "client_secret": CLIENT_SECRET
}

auth_response = requests.post(auth_url, json=auth_payload)
if auth_response.status_code != 200:
    raise Exception(f"Authentication failed: {auth_response.text}")

token = auth_response.json()
print("‚úÖ Authenticated successfully!")

# === 4Ô∏è‚É£ Query to get Test issue IDs and types ===
graphql_url = "https://xray.cloud.getxray.app/api/v2/graphql"

query = {
    "query": f"""
    {{
      getTests(jql: "project = {PROJECT_KEY} AND issuetype = Test", limit: 100) {{
        results {{
          issueId
          jira(fields: ["issuetype"])
        }}
      }}
    }}
    """
}

headers = {
    "Authorization": f"Bearer {token}",
    "Content-Type": "application/json"
}

response = requests.post(graphql_url, headers=headers, json=query)

if response.status_code == 200:
    data = response.json()
    tests = data.get("data", {}).get("getTests", {}).get("results", [])

    print(f"\n‚úÖ Found {len(tests)} Test issues in project {PROJECT_KEY}\n")
    for test in tests:
        issue_id = test["issueId"]
        issue_type = test["jira"]["issuetype"]
        print(f"Issue ID: {issue_id} | Type: {issue_type}")
else:
    print("‚ùå Failed to fetch test issue types:", response.text)







import requests
import json

# === 1Ô∏è‚É£ Replace these with your credentials ===
CLIENT_ID = "YOUR_CLIENT_ID"
CLIENT_SECRET = "YOUR_CLIENT_SECRET"

# === 2Ô∏è‚É£ Replace with the test issue ID you got earlier ===
TEST_ISSUE_ID = "YOUR_TEST_ISSUE_ID"  # e.g., "10045"

# === 3Ô∏è‚É£ Authenticate to Xray Cloud ===
auth_url = "https://xray.cloud.getxray.app/api/v2/authenticate"
auth_payload = {
    "client_id": CLIENT_ID,
    "client_secret": CLIENT_SECRET
}

auth_response = requests.post(auth_url, json=auth_payload)
if auth_response.status_code != 200:
    raise Exception(f"Authentication failed: {auth_response.text}")

token = auth_response.json()
print("‚úÖ Authenticated successfully!")

# === 4Ô∏è‚É£ GraphQL query to get Test details by ID ===
graphql_url = "https://xray.cloud.getxray.app/api/v2/graphql"

query = {
    "query": f"""
    {{
      getTest(issueId: "{TEST_ISSUE_ID}") {{
        issueId
        testType {{
          name
        }}
        jira(fields: ["key", "summary", "description", "status"])
        steps {{
          id
          action
          data
          result
        }}
      }}
    }}
    """
}

headers = {
    "Authorization": f"Bearer {token}",
    "Content-Type": "application/json"
}

response = requests.post(graphql_url, headers=headers, json=query)

if response.status_code == 200:
    data = response.json()
    test_data = data.get("data", {}).get("getTest", {})

    print("\n‚úÖ Test Details:")
    print(json.dumps(test_data, indent=2))

else:
    print("‚ùå Failed to fetch test details:", response.text)










import requests
import json
import os

# === 1Ô∏è‚É£ Replace these with your credentials ===
CLIENT_ID = "YOUR_CLIENT_ID"
CLIENT_SECRET = "YOUR_CLIENT_SECRET"

# === 2Ô∏è‚É£ Replace with your Test issue ID ===
TEST_ISSUE_ID = "YOUR_TEST_ISSUE_ID"  # e.g., "10045"

# === 3Ô∏è‚É£ Directory where attachments will be saved ===
DOWNLOAD_DIR = os.path.join(os.getcwd(), "attachments")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# === 4Ô∏è‚É£ Authenticate to Xray Cloud ===
auth_url = "https://xray.cloud.getxray.app/api/v2/authenticate"
auth_payload = {
    "client_id": CLIENT_ID,
    "client_secret": CLIENT_SECRET
}

auth_response = requests.post(auth_url, json=auth_payload)
if auth_response.status_code != 200:
    raise Exception(f"Authentication failed: {auth_response.text}")

token = auth_response.json()
print("‚úÖ Authenticated successfully!")

# === 5Ô∏è‚É£ GraphQL query to get test details (with attachments) ===
graphql_url = "https://xray.cloud.getxray.app/api/v2/graphql"

query = {
    "query": f"""
    {{
      getTest(issueId: "{TEST_ISSUE_ID}") {{
        issueId
        testType {{ name }}
        jira(fields: ["key", "summary"])
        steps {{
          id
          action
          attachments {{
            id
            filename
            downloadLink
            mimeType
          }}
        }}
      }}
    }}
    """
}

headers = {
    "Authorization": f"Bearer {token}",
    "Content-Type": "application/json"
}

response = requests.post(graphql_url, headers=headers, json=query)

if response.status_code != 200:
    print("‚ùå Failed to fetch test details:", response.text)
    exit()

test_data = response.json().get("data", {}).get("getTest", {})
steps = test_data.get("steps", [])
issue_id = test_data.get("issueId")

print(f"\n‚úÖ Found {len(steps)} steps for Test Issue ID: {issue_id}")

# === 6Ô∏è‚É£ Download all attachments ===
for step_num, step in enumerate(steps, start=1):
    attachments = step.get("attachments", [])
    if not attachments:
        continue

    for att in attachments:
        filename = att["filename"]
        download_url = att["downloadLink"]
        new_filename = f"{issue_id}_step_{step_num}_{filename}"
        filepath = os.path.join(DOWNLOAD_DIR, new_filename)

        # Download the attachment
        print(f"‚¨áÔ∏è  Downloading {filename} ‚Üí {new_filename}")
        file_response = requests.get(download_url, headers={"Authorization": f"Bearer {token}"})

        if file_response.status_code == 200:
            with open(filepath, "wb") as f:
                f.write(file_response.content)
            print(f"   ‚úÖ Saved: {filepath}")
        else:
            print(f"   ‚ùå Failed to download {filename}: {file_response.status_code}")

print("\nüéâ All attachments downloaded successfully!")
